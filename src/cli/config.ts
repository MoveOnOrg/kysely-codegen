import { z } from 'zod';
import type {
  DialectName,
  LogLevel,
  Overrides,
  Serializer,
} from '../generator';
import {
  ArrayExpressionNode,
  ExtendsClauseNode,
  GenericExpressionNode,
  IdentifierNode,
  InferClauseNode,
  LiteralNode,
  LOG_LEVELS,
  Logger,
  MappedTypeNode,
  ObjectExpressionNode,
  RawExpressionNode,
  RuntimeEnumsStyle,
  UnionExpressionNode,
} from '../generator';
import { DatabaseMetadata, DateParser, NumericParser } from '../introspector';

export type Config = {
  camelCase?: boolean;
  dateParser?: DateParser;
  defaultSchemas?: string[];
  dialect?: DialectName;
  domains?: boolean;
  envFile?: string;
  excludePattern?: string | null;
  includePattern?: string | null;
  logger?: Logger;
  logLevel?: LogLevel;
  numericParser?: NumericParser;
  outFile?: string | null;
  overrides?: Overrides;
  partitions?: boolean;
  print?: boolean;
  runtimeEnums?: boolean | RuntimeEnumsStyle;
  serializer?: Serializer;
  singularize?: boolean | Record<string, string>;
  skipAutogeneratedFileComment?: boolean;
  typeOnlyImports?: boolean;
  url?: string;
  verify?: boolean;
};

export const dialectSchema = z.enum([
  'bun-sqlite',
  'kysely-bun-sqlite',
  'libsql',
  'mssql',
  'mysql',
  'postgres',
  'sqlite',
  'worker-bun-sqlite',
]);

const expressionNodeSchema = z.union([
  z.instanceof(ArrayExpressionNode),
  z.instanceof(ExtendsClauseNode),
  z.instanceof(GenericExpressionNode),
  z.instanceof(IdentifierNode),
  z.instanceof(InferClauseNode),
  z.instanceof(LiteralNode),
  z.instanceof(MappedTypeNode),
  z.instanceof(ObjectExpressionNode),
  z.instanceof(RawExpressionNode),
  z.instanceof(UnionExpressionNode),
  z.string(),
]);

export const configSchema = z.object({
  camelCase: z.boolean().optional(),
  dateParser: z.nativeEnum(DateParser).optional(),
  defaultSchemas: z.array(z.string()).optional(),
  dialect: dialectSchema.optional(),
  domains: z.boolean().optional(),
  envFile: z.string().optional(),
  excludePattern: z.string().nullable().optional(),
  includePattern: z.string().nullable().optional(),
  logger: z.instanceof(Logger).optional(),
  logLevel: z.enum(LOG_LEVELS).optional(),
  numericParser: z.nativeEnum(NumericParser).optional(),
  outFile: z.string().nullable().optional(),
  overrides: z
    .object({ columns: z.record(z.string(), expressionNodeSchema).optional() })
    .optional(),
  partitions: z.boolean().optional(),
  print: z.boolean().optional(),
  runtimeEnums: z
    .union([z.boolean(), z.nativeEnum(RuntimeEnumsStyle)])
    .optional(),
  serializer: z
    .object({
      serializeFile: z.function(
        z.tuple([z.instanceof(DatabaseMetadata)]),
        z.string(),
      ),
    })
    .optional(),
  singularize: z
    .union([z.boolean(), z.record(z.string(), z.string())])
    .optional(),
  skipAutogeneratedFileComment: z.boolean().optional(),
  typeOnlyImports: z.boolean().optional(),
  url: z.string().optional(),
  verify: z.boolean().optional(),
});
